buildscript {
    apply from: gradle.extended.files.modules
    apply from: "gradle/versions.gradle"

    dependencies {
        classpath additionals.nexus.gradlePlugin
        classpath additionals.sonarqube.gradlePlugin
        classpath additionals.license.gradlePlugin
    }
}

plugins {
    alias(additionals.plugins.dokka)
    alias(additionals.plugins.publish.nexus)
    alias(additionals.plugins.kotlin.multiplatform) apply false
    alias(additionals.plugins.android.library) apply false
    alias(additionals.plugins.kotlin.jvm) apply false
    alias(additionals.plugins.multiplatform.moko.resources.generator) apply false
    alias(additionals.plugins.multiplatform.buildkonfig) apply false
}

group = rootProject.ext.group
version = rootProject.ext.version

ext.commit = 'git rev-parse --verify --short HEAD'.execute().text.trim()

subprojects {
    group = rootProject.ext.group
    version = rootProject.ext.version

    task allDeps(type: DependencyReportTask) {}

    if (isSourcesModule(it)) {
        apply from: gradle.extended.files.moduleSetup
    }
}

/**
 * Definitions for the publication only
 */
def getExtraString = { String name ->
    if (rootProject.ext.has(name)) return rootProject.ext[name]?.toString()
    else return null
}

nexusPublishing {
    repositories {
        sonatype {
            username = getExtraString("sonatypeUsername") ?: ""
            password = getExtraString("sonatypePassword") ?: ""
        }
    }
}

tasks.register("quality") { qualityTask ->
    group = "verification"

    subprojects.each { project ->
        def tasks = ["ktlint", "detekt"].collect {
            project.tasks.named(it)
        }.findAll { it != null }

        qualityTask.dependsOn(tasks)
    }
}